{"version":3,"sources":["book.module.css","Book.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Book","title","author","image","description","className","style","book","p","src","alt","App","useState","books","setBooks","search","setSearch","useEffect","getBooks","a","fetch","response","json","data","bookArray","Object","values","results","value","onChange","e","target","map","book_image","key","book_uri","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,oBAAoB,EAAI,kB,6MCc7DC,EAZF,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACjC,OACI,yBAAKC,UAAWC,IAAMC,MAClB,4BAAKN,GACL,uBAAGI,UAAWC,IAAME,GAApB,MAA2BN,GAC3B,yBAAKG,UAAWC,IAAMH,MAAOM,IAAKN,EAAOO,IAAI,KAC7C,2BAAIN,KCsDDO,G,MA3DH,WAEV,IAFgB,EAIUC,mBAAS,IAJnB,mBAITC,EAJS,KAIFC,EAJE,OAKYF,mBAAS,qCALrB,mBAKTG,EALS,KAKDC,EALC,KAOhBC,qBAAU,WACRC,MACC,CAACH,IAGJ,IAAMG,EAAQ,uCAAG,gCAAAC,EAAA,sEACQC,MAAM,sDAAD,OAAuDL,EAAvD,yBAXd,qCAUC,cACTM,EADS,gBAEIA,EAASC,OAFb,OAETC,EAFS,OAGTC,EAAYC,OAAOC,OAAOH,EAAKI,QAAQd,OAC7CC,EAASU,GAJM,2CAAH,qDAad,OACE,yBAAKnB,UAAU,OACb,iDACA,gKACA,0BAAMA,UAAU,eAEd,4BAAQA,UAAU,aAAauB,MAAOb,EAAQc,SAZ/B,SAACC,GACpBd,EAAUc,EAAEC,OAAOH,SAYb,4BAAQA,MAAM,qCAAd,qCACA,4BAAQA,MAAM,wCAAd,wCACA,4BAAQA,MAAM,mBAAd,8BACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,qBAAd,qBACA,4BAAQA,MAAM,wBAAd,wBACA,4BAAQA,MAAM,eAAd,iBAKJ,yBAAKvB,UAAU,SACdQ,EAAMmB,KAAI,SAAAzB,GAAI,OACb,kBAAC,EAAD,CAAMN,MAAOM,EAAKN,MAClBC,OAAQK,EAAKL,OACbC,MAAOI,EAAK0B,WACZ7B,YAAaG,EAAKH,YAClB8B,IAAK3B,EAAK4B,eAKZ,sCAAW,uBAAGC,KAAK,6CAA6CnC,MAAM,aAA3D,aAAX,SAAqG,uBAAGmC,KAAK,4BAA4BnC,MAAM,YAA1C,yBC9CvFoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.627982c7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"book\":\"book_book__3cp7d\",\"image\":\"book_image__2EtL4\",\"p\":\"book_p__1k-Wp\"};","import React from 'react';\r\nimport style from './book.module.css'\r\n\r\nconst Book = ({title, author, image, description}) => {              // get title, author, image, description from App.js\r\n    return(\r\n        <div className={style.book}>\r\n            <h1>{title}</h1>\r\n            <p className={style.p}>By {author}</p>\r\n            <img className={style.image} src={image} alt=\"\"/>\r\n            <p>{description}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Book; ","import React, {useState, useEffect} from 'react';\nimport Book from './Book';\nimport './App.css';\n\nconst App = () => {\n\n  const APP_KEY = 'rgjCiZPkJWoOFjOYx4eCmn1t5N4WYXg7';\n\n  const [books, setBooks] = useState([]);                                     // everything in the state gets stored in 'books' element whenever setBooks is called\n  const [search, setSearch] = useState(\"combined-print-and-e-book-fiction\");\n\n  useEffect(() => {\n    getBooks();\n  }, [search]);                                           //only runs when search is changed\n\n\n  const getBooks = async () => {\n    const response = await fetch(`https://api.nytimes.com/svc/books/v3/lists/current/${search}.json?api-key=${APP_KEY}`);\n    const data = await response.json();             // converts output from API to json - await means it'll wait until received info from external API\n    const bookArray = Object.values(data.results.books);\n    setBooks(bookArray);                          // will put books in the above state\n  }\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  }\n\n  // Add elements to page\n\n  return(\n    <div className=\"App\">\n      <h1>Bestselling Books</h1>\n      <p>Using React.js, this application fetches the bestselling books from the New York Times API, dependent on the drop-down selection.</p>\n      <form className=\"search-form\">\n\n        <select className=\"search-bar\" value={search} onChange={updateSearch}>        \n          <option value=\"combined-print-and-e-book-fiction\">Combined Print and E-Book Fiction</option>\n          <option value=\"combined-print-and-e-book-nonfiction\">Combined Print and E-Book Nonfiction</option>\n          <option value=\"paperback-books\">Children's Paperback Books</option>\n          <option value=\"education\">Education</option>\n          <option value=\"hardcover-fiction\">Hardcover Fiction</option>\n          <option value=\"hardcover-nonfiction\">Hardcover Nonfiction</option> \n          <option value=\"celebrities\">Celebrities</option>       \n        </select>\n\n      </form>  \n      \n      <div className=\"books\">\n      {books.map(book =>(                \n        <Book title={book.title}\n        author={book.author}\n        image={book.book_image}\n        description={book.description}\n        key={book.book_uri}\n        />\n      ))}\n      </div>\n\n      <p>Icon by <a href=\"https://www.flaticon.com/authors/good-ware\" title=\"Good Ware\">Good Ware</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\"> www.flaticon.com</a></p>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}